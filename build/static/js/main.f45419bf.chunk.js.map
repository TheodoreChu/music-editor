{"version":3,"sources":["components/MusicEditor.tsx","reportWebVitals.ts","index.tsx"],"names":["ModeType","MouseEvent","HtmlElementId","CssClassList","ComponentDataKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","modes","type","Edit","label","css","Split","View","debugMode","keyMap","Map","initialState","mode","text","success","MusicEditor","props","editorKit","note","componentDidMount","configureEditorKit","configureResizer","saveNote","onEditorValueChanged","state","handleInputChange","event","value","target","setState","renderMusic","view","document","getElementById","innerHTML","Renderer","Vex","Flow","renderer","Backends","SVG","artist","Artist","scale","tab","VexTab","parse","render","e","loadSavedMode","savedMode","internal","componentManager","componentDataValueForKey","Mode","setModeFromModeType","platform","logDebugMessage","changeMode","setComponentDataValueForKey","removeSelection","selection","window","getSelection","removeAllRanges","musicEditor","editor","Editor","columnResizer","ColumnResizer","pressed","resizerWidth","offsetWidth","addEventListener","Down","classList","add","Dragging","NoSelection","Move","x","clientX","colLeft","style","left","width","Up","remove","onKeyDown","set","key","get","preventDefault","execCommand","onKeyUp","delete","onBlur","clear","message","object","print","delegate","EditorKitDelegate","setEditorRawText","clearUndoHistory","getElementsBySelector","this","EditorKit","supportsFilesafe","className","id","tabIndex","Header","map","onClick","PrintButton","EditorContainer","autoCapitalize","autoComplete","dir","onChange","spellCheck","React","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.f45419bf.chunk.js","sourcesContent":["import * as React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport { Vex, VexTab, Artist } from 'vextab';\n\ntype Mode = {\n  type: ModeType;\n  label: string;\n  css: string;\n};\n\nenum ModeType {\n  Edit = 0,\n  Split = 1,\n  View = 2,\n}\n\nenum MouseEvent {\n  Down = 'mousedown',\n  Move = 'mousemove',\n  Up = 'mouseup',\n}\n\nenum HtmlElementId {\n  ColumnResizer = 'column-resizer',\n  Editor = 'editor',\n  EditorContainer = 'editor-container',\n  Header = 'header',\n  MusicEditor = 'music-editor',\n  View = 'view',\n  PrintButton = 'print-button',\n}\n\nenum CssClassList {\n  Dragging = 'dragging',\n  NoSelection = 'no-selection',\n}\n\nenum ComponentDataKey {\n  Mode = 'mode',\n}\n\nconst modes = [\n  { type: ModeType.Edit, label: 'Edit', css: 'edit' } as Mode,\n  { type: ModeType.Split, label: 'Split', css: 'split' } as Mode,\n  { type: ModeType.View, label: 'View', css: 'view' } as Mode,\n];\n\ntype MusicEditorState = {\n  text: string;\n  mode: Mode;\n  platform?: string;\n  success: boolean;\n};\n\nconst debugMode = false;\n\nconst keyMap = new Map();\n\nconst initialState = {\n  mode: modes[1],\n  text: 'options scale=1.0\\n\\ntabstave notation=true tablature=false\\nnotes ',\n  success: false,\n};\n\nexport default class MusicEditor extends React.Component<{}, MusicEditorState> {\n  editorKit: any;\n  note: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount = () => {\n    this.configureEditorKit();\n    this.configureResizer();\n  };\n\n  configureEditorKit() {\n    const delegate = new EditorKitDelegate({\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            text,\n          },\n          () => {\n            if (!this.state.text) {\n              this.setState({\n                text: initialState.text,\n              });\n            }\n            this.renderMusic();\n            this.loadSavedMode();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  }\n\n  saveNote = () => {\n    this.editorKit.onEditorValueChanged(this.state.text);\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n\n    this.setState(\n      {\n        text: value,\n      },\n      () => {\n        this.saveNote();\n        // Do not re-render music in edit-only mode\n        if (this.state.mode !== modes[0]) {\n          this.renderMusic();\n        }\n      }\n    );\n  };\n\n  renderMusic = () => {\n    const view = document.getElementById(HtmlElementId.View);\n    if (view) {\n      view.innerHTML = '';\n    }\n    // Create VexFlow Renderer from canvas element with id #view\n    const Renderer = Vex.Flow.Renderer;\n    const renderer = new Renderer(view, Renderer.Backends.SVG);\n\n    // Initialize VexTab artist and parser.\n    const artist = new Artist(10, 10, 600, { scale: 0.8 });\n    const tab = new VexTab(artist);\n    try {\n      tab.parse(this.state.text);\n      artist.render(renderer);\n      if (!this.state.success) {\n        this.setState({\n          success: true,\n        });\n      }\n    } catch (e) {\n      this.setState(\n        {\n          success: false,\n        },\n        () => {\n          if (view) {\n            const helpMessage = `<br/><br/><hr/><br/>Need help? Check out the <a href=\"https://vexflow.com/vextab/tutorial.html\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">VexTab Tutorial</a>.`;\n            view.innerHTML = e + helpMessage;\n          }\n          if (debugMode) {\n            console.log(e);\n          }\n        }\n      );\n    }\n  };\n\n  loadSavedMode = () => {\n    try {\n      const savedMode = this.editorKit.internal.componentManager.componentDataValueForKey(\n        ComponentDataKey.Mode\n      ) as ModeType;\n      if (debugMode) {\n        console.log('loaded savedMode: ' + savedMode);\n      }\n      if (savedMode) {\n        this.setModeFromModeType(savedMode);\n      }\n      this.setState(\n        {\n          platform: this.editorKit.internal.componentManager.platform,\n        },\n        () => {\n          if (debugMode) {\n            console.log(this.state.platform);\n          }\n        }\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error when loading saved mode: ' + e);\n      }\n    }\n  };\n\n  setModeFromModeType = (value: ModeType) => {\n    for (const mode of modes) {\n      if (mode.type === value) {\n        this.logDebugMessage('setModeFromModeType mode: ', mode.type);\n        this.setState(\n          {\n            mode,\n          },\n          () => {\n            this.renderMusic();\n          }\n        );\n        return;\n      }\n    }\n  };\n\n  changeMode = (mode: Mode) => {\n    this.setState(\n      {\n        mode,\n      },\n      () => {\n        this.renderMusic();\n      }\n    );\n    this.logDebugMessage('changeMode mode: ', mode.type);\n    try {\n      this.editorKit.internal.componentManager.setComponentDataValueForKey(\n        ComponentDataKey.Mode,\n        mode.type\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error saving mode: ' + e);\n      }\n    }\n  };\n\n  removeSelection = () => {\n    let selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  };\n\n  configureResizer = () => {\n    const musicEditor = document.getElementById(HtmlElementId.MusicEditor);\n    const editor = document.getElementById(HtmlElementId.Editor);\n    const columnResizer = document.getElementById(HtmlElementId.ColumnResizer);\n    let pressed = false;\n    let safetyOffset = 15;\n    let resizerWidth = 0;\n    if (columnResizer) {\n      resizerWidth = columnResizer.offsetWidth;\n    }\n\n    if (editor && columnResizer) {\n      columnResizer.addEventListener(MouseEvent.Down, (event) => {\n        pressed = true;\n        columnResizer.classList.add(CssClassList.Dragging);\n        editor.classList.add(CssClassList.NoSelection);\n      });\n    }\n\n    document.addEventListener(MouseEvent.Move, (event) => {\n      if (!pressed) {\n        return;\n      }\n      let x = event.clientX;\n      if (musicEditor) {\n        if (x < resizerWidth / 2 + safetyOffset) {\n          x = resizerWidth / 2 + safetyOffset;\n        } else if (x > musicEditor.offsetWidth - resizerWidth - safetyOffset) {\n          x = musicEditor.offsetWidth - resizerWidth - safetyOffset;\n        }\n      }\n\n      const colLeft = x - resizerWidth / 2;\n      if (columnResizer) {\n        columnResizer.style.left = colLeft + 'px';\n      }\n      if (editor) {\n        editor.style.width = colLeft - safetyOffset + 'px';\n      }\n\n      this.removeSelection();\n    });\n\n    document.addEventListener(MouseEvent.Up, (event) => {\n      if (pressed) {\n        pressed = false;\n        if (columnResizer) {\n          columnResizer.classList.remove(CssClassList.Dragging);\n        }\n        if (editor) {\n          editor.classList.remove(CssClassList.NoSelection);\n        }\n      }\n    });\n  };\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    keyMap.set(event.key, true);\n    if (!keyMap.get('Shift') && keyMap.get('Tab')) {\n      event.preventDefault();\n      document.execCommand('insertText', false, '\\t');\n    } else if (keyMap.get('Control') && keyMap.get('s')) {\n      event.preventDefault();\n    }\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    keyMap.delete(event.key);\n  };\n\n  onBlur = () => {\n    keyMap.clear();\n  };\n\n  logDebugMessage = (message: string, object: any) => {\n    if (debugMode) {\n      console.log(message, object);\n    }\n  };\n\n  print = () => {\n    this.renderMusic();\n    window.print();\n  };\n\n  render() {\n    return (\n      <div\n        className={'sn-component ' + this.state.platform}\n        id={HtmlElementId.MusicEditor}\n        tabIndex={0}\n      >\n        <div id={HtmlElementId.Header}>\n          <div className=\"segmented-buttons-container sk-segmented-buttons\">\n            <div className=\"buttons\">\n              {modes.map((mode) => (\n                <button\n                  onClick={() => this.changeMode(mode)}\n                  className={\n                    'sk-button button ' +\n                    (this.state.mode === mode\n                      ? 'selected info'\n                      : 'sk-secondary-contrast')\n                  }\n                >\n                  <div className=\"sk-label\">{mode.label}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n          <button\n            className={'sk-button button sk-secondary-contrast'}\n            id={HtmlElementId.PrintButton}\n            onClick={() => this.print()}\n          >\n            <div className=\"sk-label\">{'Print'}</div>\n          </button>\n        </div>\n        <main\n          id={HtmlElementId.EditorContainer}\n          className={this.state.mode.css}\n        >\n          <textarea\n            autoCapitalize=\"false\"\n            autoComplete=\"false\"\n            className={this.state.mode.css}\n            dir=\"auto\"\n            id={HtmlElementId.Editor}\n            onBlur={this.onBlur}\n            onChange={this.handleInputChange}\n            onKeyDown={this.onKeyDown}\n            onKeyUp={this.onKeyUp}\n            spellCheck=\"false\"\n            value={this.state.text}\n          />\n          <div\n            className={this.state.mode.css}\n            id={HtmlElementId.ColumnResizer}\n          ></div>\n          <section\n            className={\n              this.state.mode.css + (this.state.success ? ' success' : '')\n            }\n            id={HtmlElementId.View}\n            tabIndex={0}\n          ></section>\n        </main>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport MusicEditor from './components/MusicEditor';\nimport './stylesheets/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MusicEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}