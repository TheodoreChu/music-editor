{"version":3,"sources":["components/MusicEditor.tsx","reportWebVitals.ts","components/Icons.tsx","index.tsx"],"names":["ComponentDataKey","HtmlElementId","HtmlClassName","ModeType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PrintIcon","fill","role","aria-label","width","height","viewBox","xmlns","d","MouseEvent","modes","type","Edit","label","css","Split","View","scrollY","debugMode","initialState","mode","success","text","keyMap","Map","MusicEditor","props","editorKit","note","saveTimer","componentDidMount","configureEditorKit","configureResizer","delegate","EditorKitDelegate","setEditorRawText","setState","state","renderMusic","loadSavedMode","clearUndoHistory","getElementsBySelector","EditorKit","supportsFilesafe","saveNote","onEditorValueChanged","error","console","log","handleInputChange","event","value","target","saveText","clearTimeout","debounce","setTimeout","view","document","getElementById","scrollTop","innerHTML","Renderer","Vex","Flow","renderer","Backends","SVG","artist","Artist","scale","VexTab","parse","render","e","savedMode","internal","componentManager","componentDataValueForKey","Mode","setModeFromModeType","platform","logDebugMessage","changeMode","setComponentDataValueForKey","removeSelection","selection","window","getSelection","removeAllRanges","editor","Editor","columnResizer","ColumnResizer","pressed","resizerWidth","offsetWidth","addEventListener","Down","classList","add","Dragging","NoSelection","Move","x","clientX","colLeft","style","left","Up","remove","onBlur","clear","onFocus","onKeyDown","set","key","get","preventDefault","execCommand","onKeyUp","delete","message","object","print","className","this","id","tabIndex","Header","map","onClick","title","PrintButton","EditorContainer","autoCapitalize","autoComplete","dir","onChange","spellCheck","React","Component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.aaade9d8.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport { Vex, VexTab, Artist } from 'vextab';\nimport { debounce } from 'lodash';\nimport { PrintIcon } from './Icons';\n\nenum ComponentDataKey {\n  Mode = 'mode',\n}\n\nenum HtmlElementId {\n  ColumnResizer = 'column-resizer',\n  Editor = 'editor',\n  EditorContainer = 'editor-container',\n  Header = 'header',\n  MusicEditor = 'music-editor',\n  View = 'view',\n  PrintButton = 'print-button',\n}\n\nenum HtmlClassName {\n  Dragging = 'dragging',\n  NoSelection = 'no-selection',\n}\n\ntype Mode = {\n  type: ModeType;\n  label: string;\n  css: string;\n};\n\nenum ModeType {\n  Edit = 0,\n  Split = 1,\n  View = 2,\n}\n\nconst modes = [\n  { type: ModeType.Edit, label: 'Edit', css: 'edit' } as Mode,\n  { type: ModeType.Split, label: 'Split', css: 'split' } as Mode,\n  { type: ModeType.View, label: 'View', css: 'view' } as Mode,\n];\n\nenum MouseEvent {\n  Down = 'mousedown',\n  Move = 'mousemove',\n  Up = 'mouseup',\n}\n\ninterface EditorInterface {\n  text: string;\n  mode: Mode;\n  platform?: string;\n  success: boolean;\n}\n\nconst debugMode = false;\n\nconst initialState = {\n  mode: modes[1],\n  success: false,\n  text: 'options scale=1.0\\n\\ntabstave notation=true tablature=false\\nnotes ',\n};\n\nconst keyMap = new Map();\n\nlet scrollY: number;\n\nexport default class MusicEditor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n  note: any;\n  saveTimer: NodeJS.Timeout | undefined;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount = () => {\n    this.configureEditorKit();\n    this.configureResizer();\n  };\n\n  configureEditorKit = () => {\n    const delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState(\n          {\n            text,\n          },\n          () => {\n            if (!this.state.text) {\n              this.setState({\n                text: initialState.text,\n              });\n            }\n            this.renderMusic();\n            this.loadSavedMode();\n          }\n        );\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but may break the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = event.target;\n    const value = target.value;\n    this.saveText(value);\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState(\n      {\n        text: text,\n      },\n      () => {\n        // Do not re-render music in edit-only mode\n        if (this.state.mode !== modes[0]) {\n          if (this.saveTimer) {\n            clearTimeout(this.saveTimer);\n          }\n          debounce(() => {\n            this.renderMusic();\n          }, 300);\n          this.saveTimer = setTimeout(() => {\n            this.renderMusic();\n          }, 350);\n        }\n      }\n    );\n  };\n\n  renderMusic = () => {\n    try {\n      const view = document.getElementById(HtmlElementId.View);\n      if (view) {\n        if (this.state.success) {\n          /** Only save scrollY if it's a success.\n           * Otherwise almost every change (e.g, typing C before the C/4)\n           * will reset the scroll, and the scroll won't be preserved.\n           */\n          scrollY = view.scrollTop;\n        }\n        view.innerHTML = '';\n      }\n\n      // Create VexFlow Renderer from canvas element with id #view\n      const Renderer = Vex.Flow.Renderer;\n      const renderer = new Renderer(view, Renderer.Backends.SVG);\n\n      // Initialize VexTab artist and parser.\n      const artist = new Artist(10, 10, 600, { scale: 0.8 });\n      const tab = new VexTab(artist);\n\n      tab.parse(this.state.text);\n      artist.render(renderer);\n      if (!this.state.success) {\n        this.setState({\n          success: true,\n        });\n      }\n      if (view) {\n        // Keep the vertical scrolling\n        view.scrollTop = scrollY;\n      }\n    } catch (e) {\n      this.setState(\n        {\n          success: false,\n        },\n        () => {\n          const view = document.getElementById(HtmlElementId.View);\n          if (view) {\n            const helpMessage = `<br/><br/><hr/><br/>Need help? Check out the <a href=\"https://vexflow.com/vextab/tutorial.html\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">VexTab Tutorial</a>.`;\n            view.innerHTML = e + helpMessage;\n          }\n          if (debugMode) {\n            console.log(e);\n          }\n        }\n      );\n    }\n  };\n\n  loadSavedMode = () => {\n    try {\n      const savedMode = this.editorKit.internal.componentManager.componentDataValueForKey(\n        ComponentDataKey.Mode\n      ) as ModeType;\n      if (debugMode) {\n        console.log('loaded savedMode: ' + savedMode);\n      }\n      // We can't use if(savedMode) because it would return false for 0\n      if (typeof savedMode === 'number') {\n        this.setModeFromModeType(savedMode);\n      }\n      this.setState(\n        {\n          platform: this.editorKit.internal.componentManager.platform,\n        },\n        () => {\n          if (debugMode) {\n            console.log(this.state.platform);\n          }\n        }\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error when loading saved mode: ' + e);\n      }\n    }\n  };\n\n  setModeFromModeType = (value: ModeType) => {\n    for (const mode of modes) {\n      if (mode.type === value) {\n        this.logDebugMessage('setModeFromModeType mode: ', mode.type);\n        this.setState(\n          {\n            mode,\n          },\n          () => {\n            this.renderMusic();\n          }\n        );\n        return;\n      }\n    }\n  };\n\n  changeMode = (mode: Mode) => {\n    this.setState(\n      {\n        mode,\n      },\n      () => {\n        this.renderMusic();\n      }\n    );\n    this.logDebugMessage('changeMode mode: ', mode.type);\n    try {\n      this.editorKit.internal.componentManager.setComponentDataValueForKey(\n        ComponentDataKey.Mode,\n        mode.type\n      );\n    } catch (e) {\n      if (debugMode) {\n        console.log('Error saving mode: ' + e);\n      }\n    }\n  };\n\n  removeSelection = () => {\n    let selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  };\n\n  configureResizer = () => {\n    const MusicEditor = document.getElementById(HtmlElementId.MusicEditor);\n    const editor = document.getElementById(HtmlElementId.Editor);\n    const columnResizer = document.getElementById(HtmlElementId.ColumnResizer);\n    let pressed = false;\n    let safetyOffset = 15;\n    let resizerWidth = 0;\n    if (columnResizer) {\n      resizerWidth = columnResizer.offsetWidth;\n    }\n\n    if (editor && columnResizer) {\n      columnResizer.addEventListener(MouseEvent.Down, (event) => {\n        pressed = true;\n        columnResizer.classList.add(HtmlClassName.Dragging);\n        editor.classList.add(HtmlClassName.NoSelection);\n      });\n    }\n\n    document.addEventListener(MouseEvent.Move, (event) => {\n      if (!pressed) {\n        return;\n      }\n      let x = event.clientX;\n      if (MusicEditor) {\n        if (x < resizerWidth / 2 + safetyOffset) {\n          x = resizerWidth / 2 + safetyOffset;\n        } else if (x > MusicEditor.offsetWidth - resizerWidth - safetyOffset) {\n          x = MusicEditor.offsetWidth - resizerWidth - safetyOffset;\n        }\n      }\n\n      const colLeft = x - resizerWidth / 2;\n      if (columnResizer) {\n        columnResizer.style.left = colLeft + 'px';\n      }\n      if (editor) {\n        editor.style.width = colLeft - safetyOffset + 'px';\n      }\n\n      this.removeSelection();\n    });\n\n    document.addEventListener(MouseEvent.Up, (event) => {\n      if (pressed) {\n        pressed = false;\n        if (columnResizer) {\n          columnResizer.classList.remove(HtmlClassName.Dragging);\n        }\n        if (editor) {\n          editor.classList.remove(HtmlClassName.NoSelection);\n        }\n      }\n    });\n  };\n\n  onBlur = () => {\n    keyMap.clear();\n  };\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    keyMap.set(event.key, true);\n    if (!keyMap.get('Shift') && keyMap.get('Tab')) {\n      event.preventDefault();\n      document.execCommand('insertText', false, '\\t');\n    } else if (keyMap.get('Control') && keyMap.get('s')) {\n      event.preventDefault();\n    }\n  };\n\n  onKeyUp = (event: React.KeyboardEvent) => {\n    keyMap.delete(event.key);\n  };\n\n  logDebugMessage = (message: string, object: any) => {\n    if (debugMode) {\n      console.log(message, object);\n    }\n  };\n\n  print = () => {\n    this.renderMusic();\n    window.print();\n  };\n\n  render() {\n    return (\n      <div\n        className={'sn-component ' + this.state.platform}\n        id={HtmlElementId.MusicEditor}\n        tabIndex={0}\n      >\n        <div id={HtmlElementId.Header}>\n          <div className=\"segmented-buttons-container sk-segmented-buttons\">\n            <div className=\"buttons\">\n              {modes.map((mode) => (\n                <button\n                  onClick={() => this.changeMode(mode)}\n                  className={\n                    'sk-button button ' +\n                    (this.state.mode === mode\n                      ? 'selected info'\n                      : 'sk-secondary-contrast')\n                  }\n                  title={'Turn on ' + mode.label + ' Mode'}\n                >\n                  <div className=\"label\">{mode.label}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n          <button\n            className={'sk-button button sk-secondary-contrast icon-button'}\n            id={HtmlElementId.PrintButton}\n            onClick={() => this.print()}\n            title=\"Print rendered music\"\n          >\n            <span>&nbsp;</span>\n            <PrintIcon role=\"button\" />\n            <span>&nbsp;</span>{' '}\n          </button>\n        </div>\n        <main\n          id={HtmlElementId.EditorContainer}\n          className={this.state.mode.css}\n        >\n          <textarea\n            autoCapitalize=\"false\"\n            autoComplete=\"false\"\n            className={this.state.mode.css}\n            dir=\"auto\"\n            id={HtmlElementId.Editor}\n            onBlur={this.onBlur}\n            onChange={this.handleInputChange}\n            onKeyDown={this.onKeyDown}\n            onKeyUp={this.onKeyUp}\n            spellCheck=\"false\"\n            value={this.state.text}\n          />\n          <div\n            className={this.state.mode.css}\n            id={HtmlElementId.ColumnResizer}\n          ></div>\n          <section\n            className={\n              this.state.mode.css + (this.state.success ? ' success' : '')\n            }\n            id={HtmlElementId.View}\n            tabIndex={0}\n          ></section>\n        </main>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst infoColor = 'var(--sn-stylekit-info-color)';\nconst foregroundColor = 'var(--sn-stylekit-foreground-color)';\n\ninterface Icons {\n  condition?: boolean;\n  fill?: string;\n  role: string;\n}\n\nexport const PrintIcon: React.FC<Icons> = ({ fill, role }) => (\n  <svg\n    aria-label=\"print icon\"\n    role={role}\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M15.0001 2.5H5.00008V5.83333H15.0001V2.5ZM15.8334 10C15.6124 10 15.4004 9.9122 15.2442 9.75592C15.0879 9.59964 15.0001 9.38768 15.0001 9.16667C15.0001 8.94565 15.0879 8.73369 15.2442 8.57741C15.4004 8.42113 15.6124 8.33333 15.8334 8.33333C16.0544 8.33333 16.2664 8.42113 16.4227 8.57741C16.579 8.73369 16.6668 8.94565 16.6668 9.16667C16.6668 9.38768 16.579 9.59964 16.4227 9.75592C16.2664 9.9122 16.0544 10 15.8334 10ZM13.3334 15.8333H6.66675V11.6667H13.3334V15.8333ZM15.8334 6.66667H4.16675C3.50371 6.66667 2.86782 6.93006 2.39898 7.3989C1.93014 7.86774 1.66675 8.50363 1.66675 9.16667V14.1667H5.00008V17.5H15.0001V14.1667H18.3334V9.16667C18.3334 8.50363 18.07 7.86774 17.6012 7.3989C17.1323 6.93006 16.4965 6.66667 15.8334 6.66667Z\"\n      fill={fill ? fill : foregroundColor}\n    />\n  </svg>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport MusicEditor from './components/MusicEditor';\nimport './stylesheets/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MusicEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}